package com.sf.pvs.util;

import net.sf.ehcache.Cache; import net.sf.ehcache.CacheManager; import net.sf.ehcache.Element;

/** * ehCache工具类 */ public class EhcacheUtil {

/**
 * 添加二级缓存到内存
 * @param cacheName 缓存名称
 * @param key 缓存键
 * @param value 缓存值
 */
public void put(String cacheName, String key, Object value) {
    Cache cache =  CacheManager.getInstance().getCache(cacheName);
    Element element = new Element(key, value);
    cache.put(element);
    System.out.printf(cache.get(key).getObjectValue().toString());
}
/**
 * 根据缓存名称以及key 获取值
 * @param cacheName
 * @param key
 * @return
 */
public Object get(String cacheName, String key) {
    Cache cache =  CacheManager.getInstance().getCache(cacheName);
    Element element = cache.get(key);
    return element == null ? null : element.getObjectValue();
}
/**
 * 验证 缓存中是否存在这个key
 * @param cacheName
 * @param key
 * @return
 */
public boolean isKeyInCache(String cacheName,String key){
    Cache cache = CacheManager.getInstance().getCache(cacheName);
    return cache.isKeyInCache(key);
}
/**
 * 根据缓存名称获取缓存对象
 * @param cacheName
 * @return
 */
public Cache get(String cacheName) {
    return  CacheManager.getInstance().getCache(cacheName);
}
/**
 * 移除 缓存中的 key
 * @param cacheName
 * @param key
 */
public void remove(String cacheName, String key) {
    Cache cache =  CacheManager.getInstance().getCache(cacheName);
    cache.remove(key);
}
}
